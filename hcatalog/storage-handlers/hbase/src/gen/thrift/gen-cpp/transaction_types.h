/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef transaction_TYPES_H
#define transaction_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace Apache { namespace HCatalog { namespace HBase {

typedef struct _StoreFamilyRevision__isset {
  _StoreFamilyRevision__isset() : revision(false), timestamp(false) {}
  bool revision;
  bool timestamp;
} _StoreFamilyRevision__isset;

class StoreFamilyRevision {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  StoreFamilyRevision() : revision(0), timestamp(0) {
  }

  virtual ~StoreFamilyRevision() throw() {}

  int64_t revision;
  int64_t timestamp;

  _StoreFamilyRevision__isset __isset;

  void __set_revision(const int64_t val) {
    revision = val;
  }

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  bool operator == (const StoreFamilyRevision & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const StoreFamilyRevision &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreFamilyRevision & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StoreFamilyRevision &a, StoreFamilyRevision &b);

typedef struct _StoreFamilyRevisionList__isset {
  _StoreFamilyRevisionList__isset() : revisionList(false) {}
  bool revisionList;
} _StoreFamilyRevisionList__isset;

class StoreFamilyRevisionList {
 public:

  static const char* ascii_fingerprint; // = "9EEA65BA747AC0A451B215507F952FF9";
  static const uint8_t binary_fingerprint[16]; // = {0x9E,0xEA,0x65,0xBA,0x74,0x7A,0xC0,0xA4,0x51,0xB2,0x15,0x50,0x7F,0x95,0x2F,0xF9};

  StoreFamilyRevisionList() {
  }

  virtual ~StoreFamilyRevisionList() throw() {}

  std::vector<StoreFamilyRevision>  revisionList;

  _StoreFamilyRevisionList__isset __isset;

  void __set_revisionList(const std::vector<StoreFamilyRevision> & val) {
    revisionList = val;
  }

  bool operator == (const StoreFamilyRevisionList & rhs) const
  {
    if (!(revisionList == rhs.revisionList))
      return false;
    return true;
  }
  bool operator != (const StoreFamilyRevisionList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreFamilyRevisionList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StoreFamilyRevisionList &a, StoreFamilyRevisionList &b);

}}} // namespace

#endif
